---
import '../../styles/global.css';
import texts from '../../data/textos.json';

export function getStaticPaths() {
  return texts.map(i => ({
    params: { id: i.id }
  }));
}

const { id } = Astro.params;
const item = texts.find(i => i.id === id);

if (!item) {
  return new Response('Documento não encontrado', { status: 404 });
}
---

<html lang="pt-BR">
  <head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
    <title>Slovo - {item.title}</title>
  </head>
  <body class="min-h-screen flex items-center justify-center overflow-x-hidden">
    <p class="absolute z-1 flex top-3 justify-center opacity-7 max-[425px]:text-[10px]">
      <a class="outline-none" href="/slova/">Slovo</a>
    </p>
    <span class="z-1 absolute top-3 right-3 hover-left after:w-[100px]"
    data-tooltip="Clique nas palavras para descrevê-las."
    onclick="openModal('modal-tip')">
      <svg class="hover:stroke-(--primary) focus:stroke-(--primary) transition-colors duration-200" 
        viewBox="0 0 24 24" fill="none" stroke="var(--secondary)" stroke-width="2" width="20" height="20">
        <!-- Circle -->
        <circle cx="12" cy="12" r="10"/>
        <!-- "i" stem -->
        <line x1="12" y1="10" x2="12" y2="18"/>
        <!-- "i" dot -->
        <circle cx="12" cy="7" r="0.5"/>
      </svg>
    </span>
    <div class="absolute top-3 left-3 text-[13px] flex justify-center gap-0">
      <button id="p" class="px-2 rounded-l-md border border-(--secondary) transition-colors
      focus:outline-none opacity-50 hover:opacity-100 cursor-pointer"
      onclick="changeText('p')">
        Abc
      </button>
      <button id="cs" class="px-2 rounded-r-md border border-(--secondary) transition-colors
      focus:outline-none hover:opacity-100 cursor-pointer"
      onclick="changeText('cs')">
	<i class="s">Абв</i>
      </button>
    </div>
    <!--<div class="absolute top-3 right-3 flex justify-center gap-0">
      <button class="px-2 rounded-l-md border border-(--secondary) transition-colors
      focus:outline-none cursor-pointer">
        A+
      </button>
      <button class="px-2 rounded-r-md border border-(--secondary) transition-colors
      focus:outline-none cursor-pointer">
	A‒
      </button>
    </div>-->
    <div class="container mx-auto p-10 max-w-full text-center relative">
      <h1 class="text-5xl sm:text-md font-bold mb-3 slavonic text-(--primary)">
        {item.name}
      </h1>
      <h3 class="text-sm md:text-md italic text-(--detail) mb-7">
        {item.translation}
      </h3>
      <div class="text-3xl sm:text-md md:text-3xl lg:text-3xl leading-relaxed break-words mb-6 lg:px-50">
        {item.text.map(i => (
	<button class="cs relative mx-1 text-4xl hover:text-(--primary) after:max-w-[200px] after:overflow-hidden after:text-ellipsis after:whitespace-nowrap" data-tooltip=`${i.pronunciation} | ${i.translation}` onclick={`populateModal('${i.word}', '${i.translation}', '${i.pronunciation}', '${i.case}'); openModal('modal')`}>
          <span class="slavonic select-text sm:select-none">{i.word}</span>
	</button>
	<button class="p hidden relative mx-1 text-4xl hover:text-(--primary) after:max-w-[200px] after:overflow-hidden after:text-ellipsis after:whitespace-nowrap" data-tooltip=`${i.translation}`" onclick={`populateModal('${i.word}', '${i.translation}', '${i.pronunciation}', '${i.case}'); openModal('modal')`}>
          <span class="select-text sm:select-none">{i.pronunciation}</span>
        </button>
        ))}
      </div>
      <p class="mt-6">
        <a href="/slova/textos" class="text-(--primary) hover:underline text-lg">
          Voltar à lista
        </a>
      </p>
    </div>

    <!-- Modal -->
    <div id="modal" style="background-color: rgba(0,0,0,0.8)" class="modal fixed inset-0 hidden flex items-center justify-center z-50 text-white">
      <div style="background-color: rgb(43,30,18)" class="p-6 rounded-lg max-w-md w-full mx-4">
        <h2 id="modal-word" class="text-5xl max-[425px]:text-4xl font-bold text-(--primary) mb-4 slavonic text-center"></h2>
        <p class="text-lg"><strong>Pronúncia: </strong><span id="modal-pronunciation"></span></p>
        <p class="text-lg"><strong>Tradução: </strong><span id="modal-translation"></span></p>
        <p class="text-lg"><strong>Caso: </strong><span id="modal-case"></span></p>
      </div>
    </div>

    <div id="modal-tip" style="background-color: rgba(0,0,0,0.8)" class="modal fixed inset-0 hidden flex items-center justify-center z-50 text-white">
      <div class="bg-(--background) p-6 rounded-lg mx-3">
        <p class="text-md"><strong>Clique</strong> nas palavras para descrevê-las.</p>
      </div>
    </div>

    <script is:inline>
      function openModal(id) {
        document.getElementById(id).classList.remove('hidden');
        document.getElementById(id).classList.add('visible');
      }

      function populateModal(word, translation, pronunciation, caseText) {
        document.getElementById('modal-word').textContent = word;
        document.getElementById('modal-translation').textContent = translation;
        document.getElementById('modal-pronunciation').textContent = pronunciation;
        document.getElementById('modal-case').textContent = caseText;
      }

      function closeModal(id) {
        document.getElementById(id).classList.add('hidden');
        document.getElementById(id).classList.remove('visible');
      }

      // Fechar o modal ao clicar fora dele
      document.addEventListener('click', (e) => {
        if (e.target === document.getElementsByClassName('modal visible')[0]) {
          closeModal(document.getElementsByClassName('modal visible')[0].id);
        }
      });

      function changeText(l) {
        if (l === "cs") {
	  show = "cs";
	  hide = "p";
	}
	else if (l == "p") {
	  show = "p";
	  hide = "cs";
	}

	for (const e of document.getElementsByClassName(hide)) {
	  e.classList.remove('inline-block');
	  e.classList.add('hidden');
	}

	for (const e of document.getElementsByClassName(show)) {
	  e.classList.remove('hidden');
	  e.classList.add('inline-block');
	}

	document.getElementById(show).classList.remove('opacity-50');
	document.getElementById(hide).classList.add('opacity-50');
      }
    </script>
  </body>
</html>
